"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNativeSvg = _interopRequireDefault(require("react-native-svg"));
var _lib = require("../lib");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function IconBase({
  weight,
  color,
  size,
  style,
  mirrored,
  duotoneColor,
  duotoneOpacity,
  title,
  titleId,
  name,
  weights,
  ...props
}) {
  const {
    color: contextColor = '#000',
    size: contextSize = 24,
    weight: contextWeight = 'regular',
    mirrored: contextMirrored = false,
    style: contextStyle,
    duotoneColor: contextDuotoneColor,
    duotoneOpacity: contextDuotoneOpacity = 0.2
  } = (0, _react.useContext)(_lib.IconContext);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNativeSvg.default, {
    style: [contextStyle, style, {
      ...((mirrored ?? contextMirrored) && {
        transform: [{
          scaleX: -1
        }]
      })
    }],
    className: `${name}-${weight}__svg-icon-phosphor`,
    testID: props.testID ?? `phosphor-react-native-${name}-${weight}`,
    fill: "currentColor",
    viewBox: "0 0 256 256",
    width: size ?? contextSize,
    height: size ?? contextSize,
    color: color ?? contextColor,
    "aria-labelledby": titleId,
    ...props,
    children: [title ? /*#__PURE__*/(0, _jsxRuntime.jsx)("title", {
      id: titleId,
      children: title
    }) : null, (weight ?? contextWeight) === 'duotone' ?
    // @ts-expect-error not callable
    weights.get(weight ?? contextWeight)({
      duotoneColor: duotoneColor ?? contextDuotoneColor ?? color,
      duotoneOpacity: duotoneOpacity ?? contextDuotoneOpacity
    }) : weights.get(weight ?? contextWeight)]
  });
}
var _default = exports.default = IconBase;