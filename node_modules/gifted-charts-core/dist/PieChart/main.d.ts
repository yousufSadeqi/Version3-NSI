import { type PieChartMainProps, type pieDataItem } from './types';
export declare const getPieChartMainProps: (props: PieChartMainProps) => {
    isThreeD: boolean | undefined;
    isBiggerPie: boolean | undefined;
    propData: pieDataItem[];
    data: pieDataItem[];
    itemHasInnerComponent: boolean;
    showInnerComponent: boolean;
    radius: number;
    canvasWidth: number;
    canvasHeight: number;
    shadowWidth: number;
    backgroundColor: string;
    shadowColor: string;
    semiCircle: boolean;
    pi: number;
    initialAngle: number;
    shadow: boolean;
    donut: boolean;
    strokeWidth: number;
    strokeColor: string;
    innerRadius: number;
    showTooltip: boolean | undefined;
    tooltipWidth: number | undefined;
    persistTooltip: boolean | undefined;
    tooltipDuration: number;
    tooltipComponent: Function | undefined;
    tooltipVerticalShift: number;
    tooltipHorizontalShift: number;
    showValuesAsTooltipText: boolean;
    tooltipTextNoOfLines: number;
    tooltipBackgroundColor: import("react-native").ColorValue;
    tooltipBorderRadius: number;
    tooltipSelectedIndex: number;
    setTooltipSelectedIndex: any;
    showText: boolean;
    textColor: string;
    textSize: number;
    tiltAngle: string;
    labelsPosition: import("..").LabelsPosition;
    showTextBackground: boolean;
    textBackgroundColor: string;
    showValuesAsLabels: boolean;
    showGradient: boolean;
    gradientCenterColor: string;
    toggleFocusOnPress: boolean;
    minShiftX: number;
    maxShiftX: number;
    minShiftY: number;
    maxShiftY: number;
    total: number;
    horizAdjustment: number;
    vertAdjustment: number;
    cx: number;
    cy: number;
    pData: number[];
    mData: number[];
    acc: number;
    paddingHorizontal: number;
    paddingVertical: number;
    extraRadius: number;
    showExternalLabels: boolean | undefined;
    labelLineConfig: {
        length: number;
        tailLength: number;
        color: import("react-native").ColorValue;
        thickness: number;
        labelComponentWidth: number;
        labelComponentHeight: number;
        labelComponentMargin: number;
        avoidOverlappingOfLabels: boolean;
    };
    externalLabelComponent: ((item?: pieDataItem, index?: number) => any) | undefined;
    getExternaLabelProperties: (item: pieDataItem, mx: number, my: number, cx: number, cy: number, prevSide: string, prevLabelComponentX: number, isLast?: boolean, wasFirstItemOnPole?: boolean) => {
        labelLineColor: string;
        labelLineThickness: number;
        labelComponentHeight: number;
        inX: number;
        inY: number;
        outX: number;
        outY: number;
        finalX: number;
        labelComponentX: number;
        labelComponentY: number;
        localExternalLabelComponent: null;
        isRightHalf: boolean;
    } | {
        labelLineColor: import("react-native").ColorValue;
        labelLineThickness: number;
        labelComponentHeight: number;
        inX: number;
        inY: number;
        outX: number;
        outY: number;
        finalX: number;
        labelComponentX: number;
        labelComponentY: number;
        localExternalLabelComponent: ((item?: pieDataItem, index?: number) => any) | undefined;
        isRightHalf: boolean;
    };
    coordinates: any[];
    onPressed: (item: pieDataItem, index: number) => void;
    font: string | undefined;
    fontWeight: string | undefined;
    fontStyle: import("react-native-svg").FontStyle | undefined;
    edgesPressable: boolean | undefined;
};
