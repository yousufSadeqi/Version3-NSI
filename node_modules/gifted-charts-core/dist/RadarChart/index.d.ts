import { GridConfig, RadarChartProps } from './types';
export declare const useRadarChart: (props: RadarChartProps) => {
    data: number[];
    dataSet: number[][] | undefined;
    center: number;
    radius: number;
    chartSize: number;
    noOfSections: number;
    polarToCartesian: (angle: number, value: number) => {
        x: number;
        y: number;
    };
    labels: string[];
    labelConfigArray: import("./types").LabelConfig[] | undefined;
    labelsPositionOffset: number;
    dataLabelsConfigArray: any[];
    maxValue: number;
    dataLabels: string[] | null;
    dataLabelsArray: (string[] | null)[] | undefined;
    dataLabelsConfigSet: any[] | null;
    gridSections: any[];
    gridStroke: string;
    gridStrokeWidth: number;
    gridStrokeDashArray: number[];
    gridFill: string;
    gridGradientColor: string;
    gridShowGradient: boolean;
    gridOpacity: number;
    gridGradientOpacity: number;
    fontSize: number;
    fontWeight: string;
    fontFamily: string;
    stroke: string;
    textAnchor: string;
    alignmentBaseline: string;
    dataLabelsFontSize: number;
    dataLabelsColor: string;
    dataLabelsTextAnchor: string;
    dataLabelsAlignmentBaseline: string;
    dataLabelsPositionOffset: number;
    dataLabelsFontWeight: string;
    dataLabelsFontFamily: string;
    polygonStroke: string;
    polygonStrokeWidth: number;
    polygonStrokeDashArray: number[];
    polygonFill: string;
    polygonGradientColor: string;
    polygonShowGradient: boolean;
    polygonOpacity: number;
    polygonGradientOpacity: number;
    polygonConfigArray: any[] | null;
    polygonIsAnimated: boolean;
    polygonAnimationDuration: number;
    asterLinesStroke: string;
    asterLinesStrokeWidth: number;
    asterLinesStrokeDashArray: number[];
    points: {
        x: number;
        y: number;
    }[];
    initialPoints: {
        x: number;
        y: number;
    }[];
    polygonPoints: string;
    initialPolygonPoints: string;
    polygonPointsArray: string[];
    initialPolygonPointsArray: string[];
    angleStep: number;
    circular: boolean;
    hideGrid: boolean;
    hideLabels: boolean;
    hideAsterLines: boolean;
    getGridLevelProps: (gridItem: GridConfig, ind: number) => {
        level: number;
        gridGradientColorLocal: string;
        gridFillColorLocal: string;
        gridOpacityLocal: number;
        gridGradientOpacityLocal: number;
        gridStrokeLocal: string;
        gridStrokeWidthLocal: number;
        gridShowGradientLocal: boolean;
        gridStrokeDashArrayLocal: number[];
        levelPoints: {
            x: number;
            y: number;
        }[];
        levelPolygonPoints: string;
        r: number;
    };
    animateTogether: boolean;
};
