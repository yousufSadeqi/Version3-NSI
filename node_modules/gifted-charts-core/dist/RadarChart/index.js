var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { radarChartDefaults } from '../utils/constants';
export var useRadarChart = function (props) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
    var _u = props.circular, circular = _u === void 0 ? false : _u, _v = props.gridConfig, gridConfig = _v === void 0 ? {} : _v, _w = props.polygonConfig, polygonConfig = _w === void 0 ? {} : _w, _x = props.data, data = _x === void 0 ? [] : _x, dataSet = props.dataSet, _y = props.noOfSections, noOfSections = _y === void 0 ? radarChartDefaults.noOfSections : _y, _z = props.chartSize, chartSize = _z === void 0 ? radarChartDefaults.chartSize : _z, _0 = props.labelConfig, labelConfig = _0 === void 0 ? {} : _0, labelConfigArray = props.labelConfigArray, _1 = props.asterLinesConfig, asterLinesConfig = _1 === void 0 ? {} : _1, _2 = props.hideGrid, hideGrid = _2 === void 0 ? radarChartDefaults.hideGrid : _2, _3 = props.hideLabels, hideLabels = _3 === void 0 ? radarChartDefaults.hideLabels : _3, _4 = props.hideAsterLines, hideAsterLines = _4 === void 0 ? (_a = props.hideGrid) !== null && _a !== void 0 ? _a : radarChartDefaults.hideAsterLines : _4, _5 = props.dataLabelsConfig, dataLabelsConfig = _5 === void 0 ? {} : _5, _6 = props.labelsPositionOffset, labelsPositionOffset = _6 === void 0 ? radarChartDefaults.labelsPositionOffset : _6, _7 = props.dataLabelsPositionOffset, dataLabelsPositionOffset = _7 === void 0 ? radarChartDefaults.dataLabelsPositionOffset : _7, _8 = props.isAnimated, isAnimated = _8 === void 0 ? radarChartDefaults.isAnimated : _8, _9 = props.animationDuration, animationDuration = _9 === void 0 ? radarChartDefaults.animationDuration : _9, _10 = props.animateTogether, animateTogether = _10 === void 0 ? radarChartDefaults.animateTogether : _10;
    var labels = (_e = (_b = props.labels) !== null && _b !== void 0 ? _b : (_d = ((_c = dataSet === null || dataSet === void 0 ? void 0 : dataSet[0]) !== null && _c !== void 0 ? _c : data)) === null || _d === void 0 ? void 0 : _d.map(function (_, index) { return "Label".concat(index + 1); })) !== null && _e !== void 0 ? _e : [];
    var getMax = function (dataSet) {
        return dataSet.reduce(function (acc, set) {
            var max = Math.max.apply(Math, __spreadArray([], __read(set), false));
            return max > acc ? max : acc;
        }, 0);
    };
    var maxValue = (_f = props.maxValue) !== null && _f !== void 0 ? _f : (dataSet ? Math.max(getMax(dataSet !== null && dataSet !== void 0 ? dataSet : [])) : Math.max.apply(Math, __spreadArray([], __read((data !== null && data !== void 0 ? data : [])), false)));
    var dataLabels = (_g = props.dataLabels) !== null && _g !== void 0 ? _g : (polygonConfig.showDataValuesAsLabels
        ? data.map(function (d) { return d.toString(); })
        : null);
    var polarToCartesian = function (angle, value) {
        var radians = (Math.PI / 180) * angle;
        return {
            x: center + radius * (value / maxValue) * Math.cos(radians),
            y: center - radius * (value / maxValue) * Math.sin(radians)
        };
    };
    var center = chartSize / 2;
    var radius = center * 0.8;
    var _11 = gridConfig.stroke, gridStroke = _11 === void 0 ? radarChartDefaults.gridSection.stroke : _11, _12 = gridConfig.strokeWidth, gridStrokeWidth = _12 === void 0 ? radarChartDefaults.gridSection.strokeWidth : _12, _13 = gridConfig.strokeDashArray, gridStrokeDashArray = _13 === void 0 ? radarChartDefaults.gridSection
        .strokeDashArray : _13, _14 = gridConfig.fill, gridFill = _14 === void 0 ? radarChartDefaults.gridSection.fill : _14, _15 = gridConfig.gradientColor, gridGradientColor = _15 === void 0 ? radarChartDefaults.gridSection
        .gradientColor : _15, _16 = gridConfig.showGradient, gridShowGradient = _16 === void 0 ? radarChartDefaults.gridSection
        .showGradient : _16, _17 = gridConfig.opacity, gridOpacity = _17 === void 0 ? radarChartDefaults.gridSection.opacity : _17, _18 = gridConfig.gradientOpacity, gridGradientOpacity = _18 === void 0 ? radarChartDefaults.gridSection
        .gradientOpacity : _18;
    var gridSections = (_j = (_h = gridConfig.gridSections) === null || _h === void 0 ? void 0 : _h.map(function (i) { return (__assign(__assign({}, radarChartDefaults.gridSection), i)); })) !== null && _j !== void 0 ? _j : Array(noOfSections).fill({});
    var _19 = labelConfig.fontSize, fontSize = _19 === void 0 ? radarChartDefaults.labelConfig.fontSize : _19, _20 = labelConfig.stroke, stroke = _20 === void 0 ? radarChartDefaults.labelConfig.stroke : _20, _21 = labelConfig.textAnchor, textAnchor = _21 === void 0 ? radarChartDefaults.labelConfig.textAnchor : _21, _22 = labelConfig.alignmentBaseline, alignmentBaseline = _22 === void 0 ? radarChartDefaults.labelConfig.alignmentBaseline : _22, _23 = labelConfig.fontWeight, fontWeight = _23 === void 0 ? radarChartDefaults.labelConfig.fontWeight : _23, _24 = labelConfig.fontFamily, fontFamily = _24 === void 0 ? radarChartDefaults.labelConfig.fontFamily : _24;
    var _25 = dataLabelsConfig.fontSize, dataLabelsFontSize = _25 === void 0 ? fontSize : _25, // defaults to labelConfig (from above)
    _26 = dataLabelsConfig.stroke, // defaults to labelConfig (from above)
    dataLabelsColor = _26 === void 0 ? stroke : _26, // defaults to labelConfig (from above)
    _27 = dataLabelsConfig.textAnchor, // defaults to labelConfig (from above)
    dataLabelsTextAnchor = _27 === void 0 ? textAnchor : _27, // defaults to labelConfig (from above)
    _28 = dataLabelsConfig.alignmentBaseline, // defaults to labelConfig (from above)
    dataLabelsAlignmentBaseline = _28 === void 0 ? alignmentBaseline : _28, // defaults to labelConfig (from above)
    _29 = dataLabelsConfig.fontWeight, // defaults to labelConfig (from above)
    dataLabelsFontWeight = _29 === void 0 ? fontWeight : _29, // defaults to labelConfig (from above)
    _30 = dataLabelsConfig.fontFamily // defaults to labelConfig (from above)
    , // defaults to labelConfig (from above)
    dataLabelsFontFamily = _30 === void 0 ? fontFamily : _30 // defaults to labelConfig (from above)
    ;
    var _31 = polygonConfig.stroke, polygonStroke = _31 === void 0 ? radarChartDefaults.polygonConfig.stroke : _31, _32 = polygonConfig.strokeWidth, polygonStrokeWidth = _32 === void 0 ? radarChartDefaults.polygonConfig
        .strokeWidth : _32, _33 = polygonConfig.strokeDashArray, polygonStrokeDashArray = _33 === void 0 ? radarChartDefaults.polygonConfig
        .strokeDashArray : _33, _34 = polygonConfig.fill, polygonFill = _34 === void 0 ? radarChartDefaults.polygonConfig.fill : _34, _35 = polygonConfig.gradientColor, polygonGradientColor = _35 === void 0 ? radarChartDefaults.polygonConfig
        .gradientColor : _35, _36 = polygonConfig.showGradient, polygonShowGradient = _36 === void 0 ? radarChartDefaults.polygonConfig
        .showGradient : _36, _37 = polygonConfig.opacity, polygonOpacity = _37 === void 0 ? radarChartDefaults.polygonConfig.opacity : _37, _38 = polygonConfig.gradientOpacity, polygonGradientOpacity = _38 === void 0 ? polygonOpacity : _38, showDataValuesAsLabels = polygonConfig.showDataValuesAsLabels, _39 = polygonConfig.isAnimated, polygonIsAnimated = _39 === void 0 ? isAnimated : _39, _40 = polygonConfig.animationDuration, polygonAnimationDuration = _40 === void 0 ? animationDuration : _40;
    var polygonConfigArray = (_l = (_k = props.polygonConfigArray) === null || _k === void 0 ? void 0 : _k.map(function (set) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        return ({
            stroke: (_a = set.stroke) !== null && _a !== void 0 ? _a : polygonStroke,
            strokeWidth: (_b = set.strokeWidth) !== null && _b !== void 0 ? _b : polygonStrokeWidth,
            strokeDashArray: (_c = set.strokeDashArray) !== null && _c !== void 0 ? _c : polygonStrokeDashArray,
            fill: (_d = set.fill) !== null && _d !== void 0 ? _d : polygonFill,
            gradientColor: (_e = set.gradientColor) !== null && _e !== void 0 ? _e : polygonGradientColor,
            showGradient: (_f = set.showGradient) !== null && _f !== void 0 ? _f : polygonShowGradient,
            opacity: (_g = set.opacity) !== null && _g !== void 0 ? _g : polygonOpacity,
            gradientOpacity: (_h = set.gradientOpacity) !== null && _h !== void 0 ? _h : polygonGradientOpacity,
            showDataValuesAsLabels: (_j = set.showDataValuesAsLabels) !== null && _j !== void 0 ? _j : showDataValuesAsLabels,
            isAnimated: (_k = set.isAnimated) !== null && _k !== void 0 ? _k : polygonIsAnimated,
            animationDuration: (_l = set.animationDuration) !== null && _l !== void 0 ? _l : polygonAnimationDuration
        });
    })) !== null && _l !== void 0 ? _l : (dataSet
        ? Array(dataSet.length).fill({
            stroke: polygonStroke,
            strokeWidth: polygonStrokeWidth,
            strokeDashArray: polygonStrokeDashArray,
            fill: polygonFill,
            gradientColor: polygonGradientColor,
            showGradient: polygonShowGradient,
            opacity: polygonOpacity,
            gradientOpacity: polygonGradientOpacity,
            showDataValuesAsLabels: showDataValuesAsLabels,
            isAnimated: polygonIsAnimated,
            animationDuration: polygonAnimationDuration
        })
        : null);
    var dataLabelsArray = (_m = props.dataLabelsArray) !== null && _m !== void 0 ? _m : polygonConfigArray === null || polygonConfigArray === void 0 ? void 0 : polygonConfigArray.map(function (polygonItem, index) {
        return polygonItem.showDataValuesAsLabels ? data.map(function (d) { return d.toString(); }) : null;
    });
    var dataLabelsConfigArray = (_p = (_o = props.dataLabelsConfigArray) === null || _o === void 0 ? void 0 : _o.map(function (dataLabelsConfigItem) {
        var _a, _b, _c, _d, _e, _f;
        return ({
            fontSize: (_a = dataLabelsConfigItem.fontSize) !== null && _a !== void 0 ? _a : dataLabelsFontSize,
            stroke: (_b = dataLabelsConfigItem.stroke) !== null && _b !== void 0 ? _b : dataLabelsColor,
            textAnchor: (_c = dataLabelsConfigItem.textAnchor) !== null && _c !== void 0 ? _c : dataLabelsTextAnchor,
            alignmentBaseline: (_d = dataLabelsConfigItem.alignmentBaseline) !== null && _d !== void 0 ? _d : dataLabelsAlignmentBaseline,
            fontWeight: (_e = dataLabelsConfigItem.fontWeight) !== null && _e !== void 0 ? _e : dataLabelsFontWeight,
            fontFamily: (_f = dataLabelsConfigItem.fontFamily) !== null && _f !== void 0 ? _f : dataLabelsFontFamily
        });
    })) !== null && _p !== void 0 ? _p : Array(data.length).fill({
        fontSize: dataLabelsFontSize,
        stroke: dataLabelsColor,
        textAnchor: dataLabelsTextAnchor,
        alignmentBaseline: dataLabelsAlignmentBaseline,
        fontWeight: dataLabelsFontWeight,
        fontFamily: dataLabelsFontFamily
    });
    var dataLabelsConfigSet = (_r = (_q = props.dataLabelsConfigSet) === null || _q === void 0 ? void 0 : _q.map(function (dataLabelConfigSetItem) {
        return dataLabelConfigSetItem.map(function (dataLabelConfigItem) {
            var _a, _b, _c, _d, _e, _f;
            return ({
                fontSize: (_a = dataLabelConfigItem.fontSize) !== null && _a !== void 0 ? _a : dataLabelsFontSize,
                stroke: (_b = dataLabelConfigItem.stroke) !== null && _b !== void 0 ? _b : dataLabelsColor,
                textAnchor: (_c = dataLabelConfigItem.textAnchor) !== null && _c !== void 0 ? _c : dataLabelsTextAnchor,
                alignmentBaseline: (_d = dataLabelConfigItem.alignmentBaseline) !== null && _d !== void 0 ? _d : dataLabelsAlignmentBaseline,
                fontWeight: (_e = dataLabelConfigItem.fontWeight) !== null && _e !== void 0 ? _e : dataLabelsFontWeight,
                fontFamily: (_f = dataLabelConfigItem.fontFamily) !== null && _f !== void 0 ? _f : dataLabelsFontFamily
            });
        });
    })) !== null && _r !== void 0 ? _r : (dataSet ? Array(dataSet.length).fill(dataLabelsConfigArray) : null);
    var _41 = asterLinesConfig.stroke, asterLinesStroke = _41 === void 0 ? gridStroke : _41, _42 = asterLinesConfig.strokeWidth, asterLinesStrokeWidth = _42 === void 0 ? gridStrokeWidth : _42, _43 = asterLinesConfig.strokeDashArray, asterLinesStrokeDashArray = _43 === void 0 ? radarChartDefaults.asterLineStrokeDashArray : _43;
    // Calculate angles for each category
    var angleStep = 360 / labels.length;
    // Generate coordinates for the data points
    var points = data.map(function (value, index) {
        var angle = index * angleStep;
        return polarToCartesian(angle, value);
    });
    var initialPoints = data.map(function (value, index) {
        var angle = index * angleStep;
        return polarToCartesian(angle, 0);
    });
    var pointsArray = (_s = dataSet === null || dataSet === void 0 ? void 0 : dataSet.map(function (set) {
        return set.map(function (value, index) {
            var angle = index * angleStep;
            return polarToCartesian(angle, value);
        });
    })) !== null && _s !== void 0 ? _s : [];
    var initialPointsArray = (_t = dataSet === null || dataSet === void 0 ? void 0 : dataSet.map(function (set) {
        return set.map(function (value, index) {
            var angle = index * angleStep;
            return polarToCartesian(angle, 0);
        });
    })) !== null && _t !== void 0 ? _t : [];
    // Generate the polygon points for the radar chart (in SVG "x,y" format)
    var polygonPoints = points.map(function (point) { return "".concat(point.x, ",").concat(point.y); }).join(' ');
    var initialPolygonPoints = initialPoints
        .map(function (point) { return "".concat(point.x, ",").concat(point.y); })
        .join(' ');
    var polygonPointsArray = pointsArray.map(function (set) {
        return set.map(function (point) { return "".concat(point.x, ",").concat(point.y); }).join(' ');
    });
    var initialPolygonPointsArray = initialPointsArray.map(function (set) {
        return set.map(function (point) { return "".concat(point.x, ",").concat(point.y); }).join(' ');
    });
    var getGridLevelProps = function (gridItem, ind) {
        var level = noOfSections - ind;
        var gridGradientColorLocal = gridItem.gradientColor || gridGradientColor;
        var gridFillColorLocal = gridItem.fill || gridFill;
        var gridOpacityLocal = gridItem.opacity || gridOpacity;
        var gridGradientOpacityLocal = gridItem.gradientOpacity || gridGradientOpacity;
        var gridStrokeLocal = gridItem.stroke || gridStroke;
        var gridStrokeWidthLocal = gridItem.strokeWidth || gridStrokeWidth;
        var gridShowGradientLocal = gridItem.showGradient || gridShowGradient;
        var gridStrokeDashArrayLocal = gridItem.strokeDashArray || gridStrokeDashArray;
        var levelPoints = labels.map(function (_, index) {
            var angle = index * angleStep;
            return polarToCartesian(angle, (level / noOfSections) * maxValue);
        });
        var levelPolygonPoints = levelPoints
            .map(function (point) { return "".concat(point.x, ",").concat(point.y); })
            .join(' ');
        var r = radius * (level / noOfSections);
        return {
            level: level,
            gridGradientColorLocal: gridGradientColorLocal,
            gridFillColorLocal: gridFillColorLocal,
            gridOpacityLocal: gridOpacityLocal,
            gridGradientOpacityLocal: gridGradientOpacityLocal,
            gridStrokeLocal: gridStrokeLocal,
            gridStrokeWidthLocal: gridStrokeWidthLocal,
            gridShowGradientLocal: gridShowGradientLocal,
            gridStrokeDashArrayLocal: gridStrokeDashArrayLocal,
            levelPoints: levelPoints,
            levelPolygonPoints: levelPolygonPoints,
            r: r
        };
    };
    return {
        data: data,
        dataSet: dataSet,
        center: center,
        radius: radius,
        chartSize: chartSize,
        noOfSections: noOfSections,
        polarToCartesian: polarToCartesian,
        labels: labels,
        labelConfigArray: labelConfigArray,
        labelsPositionOffset: labelsPositionOffset,
        dataLabelsConfigArray: dataLabelsConfigArray,
        maxValue: maxValue,
        dataLabels: dataLabels,
        dataLabelsArray: dataLabelsArray,
        dataLabelsConfigSet: dataLabelsConfigSet,
        gridSections: gridSections,
        gridStroke: gridStroke,
        gridStrokeWidth: gridStrokeWidth,
        gridStrokeDashArray: gridStrokeDashArray,
        gridFill: gridFill,
        gridGradientColor: gridGradientColor,
        gridShowGradient: gridShowGradient,
        gridOpacity: gridOpacity,
        gridGradientOpacity: gridGradientOpacity,
        fontSize: fontSize,
        fontWeight: fontWeight,
        fontFamily: fontFamily,
        stroke: stroke,
        textAnchor: textAnchor,
        alignmentBaseline: alignmentBaseline,
        dataLabelsFontSize: dataLabelsFontSize,
        dataLabelsColor: dataLabelsColor,
        dataLabelsTextAnchor: dataLabelsTextAnchor,
        dataLabelsAlignmentBaseline: dataLabelsAlignmentBaseline,
        dataLabelsPositionOffset: dataLabelsPositionOffset,
        dataLabelsFontWeight: dataLabelsFontWeight,
        dataLabelsFontFamily: dataLabelsFontFamily,
        polygonStroke: polygonStroke,
        polygonStrokeWidth: polygonStrokeWidth,
        polygonStrokeDashArray: polygonStrokeDashArray,
        polygonFill: polygonFill,
        polygonGradientColor: polygonGradientColor,
        polygonShowGradient: polygonShowGradient,
        polygonOpacity: polygonOpacity,
        polygonGradientOpacity: polygonGradientOpacity,
        polygonConfigArray: polygonConfigArray,
        polygonIsAnimated: polygonIsAnimated,
        polygonAnimationDuration: polygonAnimationDuration,
        asterLinesStroke: asterLinesStroke,
        asterLinesStrokeWidth: asterLinesStrokeWidth,
        asterLinesStrokeDashArray: asterLinesStrokeDashArray,
        points: points,
        initialPoints: initialPoints,
        polygonPoints: polygonPoints,
        initialPolygonPoints: initialPolygonPoints,
        polygonPointsArray: polygonPointsArray,
        initialPolygonPointsArray: initialPolygonPointsArray,
        angleStep: angleStep,
        circular: circular,
        hideGrid: hideGrid,
        hideLabels: hideLabels,
        hideAsterLines: hideAsterLines,
        getGridLevelProps: getGridLevelProps,
        animateTogether: animateTogether
    };
};
